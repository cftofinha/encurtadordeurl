package br.com.fpaulino.encurtadordeurl.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.fpaulino.encurtadordeurl.common.ShorteningUtil;
import br.com.fpaulino.encurtadordeurl.dto.UrlCompleta;
import br.com.fpaulino.encurtadordeurl.dto.UrlCurta;
import  br.com.fpaulino.encurtadordeurl.model.Url;
import  br.com.fpaulino.encurtadordeurl.repository.UrlRepository;

@Service
public class UrlService {

    Logger logger = LoggerFactory.getLogger(UrlService.class);

    private final UrlRepository urlRepository;

    @Autowired
    public UrlService(UrlRepository urlRepository) {
        this.urlRepository = urlRepository;
    }

    private Url get(Long id) {
        logger.info(String.format("Fetching Url from database for Id %d", id));
        Url urlEntity = urlRepository.findById(id).get();
        return urlEntity;
    }

    /**
     * Uses the Base62 encoded to convert to Base10 number and fetches the corresponding record from the database
     *
     * @param shortenString Base62 encoded string
     * @return FullUrl object
     */
    public UrlCompleta getUrlCompleta(String shortenString) {
        logger.debug("Converting Base 62 string %s to Base 10 id");
        Long id = ShorteningUtil.strToId(shortenString);
        logger.info(String.format("Converted Base 62 string %s to Base 10 id %s", shortenString, id));

        logger.info(String.format("Retrieving full url for %d", id));
        return new UrlCompleta(this.get(id).getUrlCompleta());
    }

    private Url save(UrlCompleta urlCompleta) {
        return urlRepository.save(new Url(urlCompleta.getUrlCompleta()));
    }

    /**
     * It saves the full url to database and uses the autogenerated id to convert to Base62 string
     *
     * @param urlCompleta object to be converted to shortened url
     * @return ShortUrl object
     */
    public UrlCurta getUrlCurta(UrlCompleta urlCompleta) {

        logger.info("Checking if the url already exists");
        List<Url> savedUrls = null;
        savedUrls = checkFullUrlAlreadyExists(urlCompleta);

        Url savedUrl = null;

        if (savedUrls.isEmpty()) {
            logger.info(String.format("Salvando Url %s no banco", urlCompleta.getUrlCompleta()));
            savedUrl = this.save(urlCompleta);
            logger.debug(savedUrl.toString());
        }
        else {
            savedUrl = savedUrls.get(0);
            logger.info(String.format("url: %s j√° existe em nosos banco. insert abortado", savedUrl));
        }

        logger.debug(String.format("Convertendo string Base 10 %d para Base 62", savedUrl.getId()));
        String shortUrlText = ShorteningUtil.idToStr(savedUrl.getId());
        logger.info(String.format("Convertendo string  10 %d para Base 62 %s", savedUrl.getId(), shortUrlText));

        return new UrlCurta(shortUrlText);
    }

    /**
     * Check if Url already exists in the database to prevent having same url stored multiple times
     *
     * @param urlCompleta
     * @return list of UrlEntity objects, list will be empty if no results found
     */
    private List<Url> checkFullUrlAlreadyExists(UrlCompleta urlCompleta) {
        return urlRepository.findUrlByUrlCompleta(urlCompleta.getUrlCompleta());
    }
}